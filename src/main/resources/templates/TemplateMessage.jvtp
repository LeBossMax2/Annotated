package ${package};

import javax.annotation.Generated;
import net.minecraft.network.PacketBuffer;
import net.minecraftforge.fml.network.NetworkEvent;
import net.minecraftforge.fml.network.PacketDistributor;
import net.minecraftforge.fml.network.simple.SimpleChannel;
${if clientPacket}
import net.minecraft.entity.player.ServerPlayerEntity;
${end}
import fr.max2.annotated.lib.network.${receiveSide}MessageHandler;
${imports}
@Generated("fr.max2.annotated.processor.network.PacketProcessor")
public class ${className}
{
${fieldsDeclaration}
	
	private ${className}()
	{ }
	
	${if allFields}
	private ${className}(${allFields})
	{
${fieldsInit}
	}
	${end}

	private static void encode(${className} msg, PacketBuffer buf)
	{
${encode}
	}
	
	private static ${className} decode(PacketBuffer buf)
	{
		${className} msg = new ${className}();
		
${decode}
		
		return msg;
	}
	
	private static void handle(${className} msg, NetworkEvent.Context ctx)
	{
		${function}(${parameters});
	}
	
	static void registerTo(SimpleChannel channel, int index)
	{
		channel.registerMessage(index, ${className}.class, ${className}::encode, ${className}::decode, ${receiveSide}MessageHandler.buildHandler(${sheduled}, ${className}::handle));
	}
	
	${if clientPacket}public${else}private${end} static void send(PacketDistributor.PacketTarget target${if allFields}, ${end}${allFields})
	{
		${generatorClass}.CHANNEL.send(target, new ${className}(${messageParameters}));
	}
	${if serverPacket}
	
	public static void sendToServer(${allFields})
	{
		send(PacketDistributor.SERVER.noArg()${if allFields}, ${end}${messageParameters});
	}
	${end}
	${if clientPacket}
	
	public static void sendTo(ServerPlayerEntity player${if allFields}, ${end}${allFields})
	{
		send(PacketDistributor.PLAYER.with(() -> player)${if allFields}, ${end}${messageParameters});
	}
	${end}
}
