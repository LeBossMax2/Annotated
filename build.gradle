buildscript {
	repositories {
		maven { url = 'https://files.minecraftforge.net/maven' }
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
	}
}

plugins {
	id 'jacoco'
	id 'org.sonarqube' version '2.6'
}

allprojects {
	apply plugin: 'net.minecraftforge.gradle'
}

jacoco {
	toolVersion = '0.8.3'
}

sonarqube {
	properties {
		property 'sonar.projectKey', 'annotated'
		property 'sonar.projectName', 'Annotated'
	}
}

ext {
	mcVersion = '1.15.2'
	libVersion = "$mcVersion-2.0"
	processorVersion = "$libVersion-2.0"
}

version = processorVersion
group = 'fr.max2.annotated'
archivesBaseName = 'Annotated'

project(':AnnotatedExample') {
	version = "$mcVersion-1.0"
	group = 'fr.max2.annotated.example'
	archivesBaseName = 'AnnotatedExample'
}

allprojects {
	apply plugin: 'eclipse'
	
	sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'
	
	minecraft {
		mappings channel: 'snapshot', version: '20200425-1.15.1'
		runs {
			client {
				workingDirectory project.file('run/client')

				property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
				property 'forge.logging.console.level', 'debug'

				mods {
					annotated {
						source sourceSets.main
					}
				}
			}

			server {
				workingDirectory project.file('run/server')

				property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
				property 'forge.logging.console.level', 'debug'

				mods {
					annotated {
						source sourceSets.main
					}
				}
			}
		}
	}
	
	processResources {
		inputs.property 'version', project.version
		inputs.property 'mcversion', rootProject.mcVersion
		
		from(sourceSets.main.resources.srcDirs) {
			include 'META-INF/mods.toml'
			
			expand 'version': project.version, 'mcversion': rootProject.mcVersion
		}

		from(sourceSets.main.resources.srcDirs) {
			exclude 'META-INF/mods.toml'
		}
	}
	
	repositories {
		mavenCentral()
	}

	dependencies {
		minecraft 'net.minecraftforge:forge:1.15.2-31.1.0'
		testCompile 'junit:junit:4.12'
	}
}

sourceSets {
	lib {
 		java {
 			compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
 		}
 	}
 	test {
 		java {
 			compileClasspath += lib.output
            runtimeClasspath += lib.output
 		}
 	}
}

/*configurations {
    libMinecraft.extendsFrom minecraft
}

dependencies {
	libMinecraft 'net.minecraftforge:forge:1.15.2-31.1.0'
}*/

processResources {
	from(sourceSets.main.java.srcDirs) {
		include 'fr/max2/annotated/lib/ModAnnotatedLib.java'
		expand '@VERSION@': project.libVersion
	}
}

jar {
	manifest {
		attributes([
			'Specification-Title': 'TextureCombiner',
			'Specification-Vendor': 'LeBossMax2',
			'Specification-Version': '1',
			'Implementation-Title': project.name,
			'Implementation-Version': "${version}",
			'Implementation-Vendor' :'LeBossMax2',
			'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
	classifier = 'dev'
}

task deobfJar(type: Jar) {
	from sourceSets.main.output
	classifier = 'dev-deobf'
}

task sourcesJar(type: Jar, dependsOn: classes) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

tasks.assemble.dependsOn 'deobfJar'
tasks.assemble.dependsOn 'sourcesJar'

artifacts {
	archives deobfJar
	archives sourcesJar
}